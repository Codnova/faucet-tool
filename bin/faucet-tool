#!/usr/bin/env node

'use strict';

/**
 * Module imports
 */

const argv = require('minimist')(process.argv.slice(2));
const { version, FaucetTool } = require('..');
const fs = require('fs');
const os = require('os');
const QRCode = require('qrcode');

/**
 * Constants
 */

const FAUCET_TOOL_DIR = os.homedir() + '/.hnsFaucetTool/';
const VALID_CMDS = ['version', 'createaddress', 'createmultisig'];
const VALID_OPTS  = ['n', 'l', 'b', 'backup', 'show-keys', 'project-sponsor'];

/**
 * Processes commands and runs tool
 */

(async function() {
  try {
    const { cmd, args, opts } = parseCmd(argv);
    const tool = new FaucetTool({
      network: opts.n,
      language: opts.l,
      bits: opts.b
    });

    switch (cmd) {
      case VALID_CMDS[0]:
        console.log(version);
        break;
      case VALID_CMDS[1]:
        await createAddress(tool, args, opts);
        break;

      case VALID_CMDS[2]:
        await createMultisig(tool, args, opts);
        break;
    }

    process.exit(0);
  } catch (err) {
    usage(err);
    process.exit(1);
  }
}());

/**
 * Creates a Bech32 encoded, HNS address.
 * @param {Object} tool - an instance of FaucetTool
 * @param {Array} args - arguments captured from stdin
 * @param {Object} opts - command options captures from stdin
 */

async function createAddress(tool, args, opts) {
  if (args.length !== 0)
    usage(`invalid arguments: ${args}`);

  let ciphertext,
      details = `Seed phrase:\n${tool.getPhrase()}` +
                `\n\nAddress:\n${tool.getAddress()}`;

  if (opts['project-sponsor']) {
    ciphertext = await FaucetTool.encryptData(tool.getAddress());
    details += `\n\nEncrypted address:\n${ciphertext}`;
  }

  if (opts['show-keys']) {
    details += `\n\nPrivate key:\n${tool.getPrivkey()}` +
               `\n\nPublic key:\n${tool.getPubkey()}`;
  }

  return render(tool.getAddress(), details, opts['backup'], ciphertext);
}

/**
 * Creates a Bech32 encoded, HNS multisig address.
 * @param {Object} tool - an instance of FaucetTool
 * @param {Array} args - arguments captured from stdin
 * @param {Object} opts - command options captures from stdin
 */
async function createMultisig(tool, [nrequired, ...keys], opts) {
  if ((nrequired >>> 0) !== nrequired)
    usage('nrequired should be an Int');

  if (nrequired > keys.length)
    usage('nrequired should not be larger than the number of keys');

  if (nrequired + keys.length < 2)
    usage(`invalid m of n configuration: ${nrequired} of ${keys.length}`);

  keys.forEach(key => {
    if (!FaucetTool.isValidPubkey(key))
      usage(`invalid pubkey: ${key}`);
  });

  const multisig = await FaucetTool.createMultisig(tool.getNetwork(), nrequired, keys);

  let ciphertext,
      details = `Multisig address:\n${multisig.address}\n\n`;

  if (opts['project-sponsor']) {
    ciphertext = await FaucetTool.encryptData(multisig.address);
    details += `Encrypted multisig address:\n${ciphertext}\n\n`;
  }

  details += `Redeem script:\n${multisig.redeemScript}\n\n`;

  return render(multisig.address, details, opts['backup'], ciphertext);
}

/**
 * Renders the tool's output.
 * @param {String} address - the generated address
 * @param {String} details - the wallet details
 * @param {Boolean} backup - true if a backup should be created
 * @param {String?} ciphertext - the encrypted address
 */

async function render(address, details, backup, ciphertext) {
  const prefix = FAUCET_TOOL_DIR + address;
  const detailsPath = prefix + '_details.txt';
  const codePath = prefix + '_encrypted_address_QR_code.png'

  // Render files if backup flag is passed
  // or a QR code needs to be generated.
  if (backup || ciphertext) {
    let count = 1;

    if (!fs.existsSync(FAUCET_TOOL_DIR))
      fs.mkdirSync(FAUCET_TOOL_DIR);

    if (backup)
      fs.writeFileSync(detailsPath, details);

    details += `\n\nThe following files were created:`;

    if (backup)
      details += `\n - ${detailsPath} [${count++}]`;

    if (ciphertext)
      details += `\n - ${codePath} [${count}]`;

    // Needed to separate files from legend.
    details += '\n';

    if (backup)
      details += `\n[1]: Wallet details`;

    if (ciphertext)
      details += `\n[${count}]: QR code of encrypted address`;

    if (ciphertext)
      await QRCode.toFile(codePath, ciphertext);
  }

  console.log(details);
}

/**
 * Parses command arguments.
 * @param {Object} argv - parsed output minimist
 * @returns {Object} ret - parsed command info
 * @returns {String} ret.cmd - command name
 * @returns {String} ret.args - command args
 * @returns {Object} ret.opts - command options
 */

function parseCmd(argv) {
  let cmd = argv._[0],
      args = argv._.slice(1),
      nopts = 0,
      opts = argv;

  if (!VALID_CMDS.includes(cmd))
    usage(`invalid command: ${cmd}`);

  for (let opt in opts) {
    if (opts.hasOwnProperty(opt)) {
      //  this key holds the cmd & args
      if (opt === '_')
        continue;

      if (!VALID_OPTS.includes(opt))
        usage(`invalid option: ${opt}`);
    }
  }

  return { cmd, args, opts };
}

/**
 * Displays error message and exits process
 * @param {String|Error} err - the error message or object
 */

function usage(err) {
  const msg =
`faucet-tool: ${err}
usage:
  $ faucet-tool createaddress
  $ faucet-tool createmultisig <num required> <pubkey1> <pubkey2> ... <pubkeyN>
  $ faucet-tool version

Options:
  -n <network> (default "main")
  -l <seed language> (default "english")
  -b <bits of entropy> (default 256)

Flags:
  --backup (creates a backup file of wallet details)
  --show-keys (show address key pair)
  --project-sponsor (generates encryped address for project sponsors)
`;

  if(typeof err === 'string') {
    console.log(msg);
  } else {
    console.error(err);
  }

  process.exit(1);
}
